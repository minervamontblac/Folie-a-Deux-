#define _CRT_SECURE_NO_WARNINGS 1
#include"game.h"
void intboard(char board[ROWS][COLS],int rows,int cols,char set)
{
	int i = 0;
	int j = 0;
	for(i=0;i<rows;i++)
	{
		for(j=0;j<cols;j++)
		{
			board[i][j]=set;
		}
	}
}
void displayboard(char board[ROWS][COLS],int row,int col)
{
	int i = 0;
	int j = 0;
	for(i=0;i<=col;i++)
	{
		printf("%d ",i);
	}
	printf("\n");
	for(i=1;i<=row;i++)
	{
		printf("%d ",i);
		for(j=1;j<=col;j++)
		{
			printf("%c ",board[i][j]);
		}
	printf("\n");	
	}
}
void setmine(char board[ROWS][COLS],int row,int col)
{
	int count = easycount;
	while(count)
	{
		int x = rand()%row+1;
		int y = rand()%col+1;
		if(board[x][y] == '0')
		{
			board[x][y]='1';
			count--;
		}
	}
}
int getmycount(char mine[ROWS][COLS],int x,int y)
{
	return mine[x-1][y]+mine[x-1][y-1]+mine[x][y-1]+mine[x+1][y-1]+mine[x+1][y]+mine[x+1][y+1]+mine[x][y+1]+mine[x-1][y+1]-8*'0';
}
void dg(char mine[ROWS][COLS],char show[ROWS][COLS],int x,int y)
{
	int i = 0;
	int j = 0;
	for(i=0;i<=2;i++)
	{
		for(j=0;j<=2;j++)
		{
			if(mine[x-1+i][y-1+j]=='0')
			{
				show[x-1+i][y-1+j]=' ';
			}
		}
	}
}
void findmine(char mine[ROWS][COLS],char show[ROWS][COLS],int row,int col)
{
	int x = 0;
	int y = 0;
	int win = 0;
	while(win<row*col-easycount)
	{
	printf("请输入排雷坐标:>");
	scanf("%d%d",&x,&y);
	if(x>=1&&x<=row&&y>=1&&y<=col)
	{
		if(mine[x][y]=='1')
		{
			printf("你被炸死了\n");
			displayboard(mine,row,col);
			break;
		}
		else
		{
			dg(mine,show,x,y);
			int count = getmycount(mine,x,y);
			if(count==0)
			{
				show[x][y]=' ';
			}
			else
			{
				show[x][y] = count + '0';
			}
			displayboard(show,row,col);
			win++;
		}
	}
	else
	{
		printf("重新输入\n");
	}
	}
	if(win==row*col-easycount)
	{
		printf("恭喜你赢了\n");
		displayboard(mine,row,col);
	}
}
